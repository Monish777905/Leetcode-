#include <string.h>

int longestValidParentheses(char * s) {
    int n = strlen(s);
    if (n == 0) return 0;
    
    int dp[n];
    memset(dp, 0, sizeof(dp));
    int maxLength = 0;

    for (int i = 1; i < n; i++) {
        if (s[i] == ')') {
            if (s[i - 1] == '(') {
                dp[i] = (i >= 2 ? dp[i - 2] : 0) + 2;
            } else if (i - dp[i - 1] - 1 >= 0 && s[i - dp[i - 1] - 1] == '(') {
                dp[i] = dp[i - 1] + 2 + (i - dp[i - 1] - 2 >= 0 ? dp[i - dp[i - 1] - 2] : 0);
            }
            maxLength = (dp[i] > maxLength) ? dp[i] : maxLength;
        }
    }
    return maxLength;
}
