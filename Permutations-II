/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
 int compare(const void *a, const void *b) {
    return (*(int*)a - *(int*)b);
}

void backtrack(int* nums, int numsSize, int* used, int* currentPermutation, int* returnSize, int** returnColumnSizes, int*** result, int depth) {
    if (depth == numsSize) {
        (*result)[*returnSize] = malloc(numsSize * sizeof(int));
        (*returnColumnSizes)[*returnSize] = numsSize;
        for (int i = 0; i < numsSize; i++) {
            (*result)[*returnSize][i] = currentPermutation[i];
        }
        (*returnSize)++;
        return;
    }

    for (int i = 0; i < numsSize; i++) {
        if (!used[i]) {
            if (i > 0 && nums[i] == nums[i - 1] && !used[i - 1]) {
                continue;
            }

            currentPermutation[depth] = nums[i];
            used[i] = 1;
            backtrack(nums, numsSize, used, currentPermutation, returnSize, returnColumnSizes, result, depth + 1);
            used[i] = 0;
        }
    }
}

int** permuteUnique(int* nums, int numsSize, int* returnSize, int** returnColumnSizes) {
    qsort(nums, numsSize, sizeof(int), compare);

    int** result = malloc(1000 * sizeof(int*));
    *returnSize = 0;
    *returnColumnSizes = malloc(1000 * sizeof(int));
    int* currentPermutation = malloc(numsSize * sizeof(int));
    int* used = calloc(numsSize, sizeof(int));

    backtrack(nums, numsSize, used, currentPermutation, returnSize, returnColumnSizes, &result, 0);

    free(currentPermutation);
    free(used);
    return result;
}
